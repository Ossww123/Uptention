pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'jodaeseong/uptention-spring-image'
        DOCKER_CONTAINER = 'uptention-spring-container'
        DOCKER_PORT = 9090

        SPRING_DATASOURCE_URL = credentials('SPRING_DATASOURCE_URL')
        SPRING_DATASOURCE_USERNAME = credentials('SPRING_DATASOURCE_USERNAME')
        SPRING_DATASOURCE_PASSWORD = credentials('SPRING_DATASOURCE_PASSWORD')
    }

    tools { jdk 'JDK17' }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository...'
                git branch: 'be',
                    url: 'https://lab.ssafy.com/s12-blockchain-nft-sub1/S12P21D211.git',
                    credentialsId: '0d048b2d-2bdf-4166-a809-76e195d64abb'
            }
        }
        stage('Build Application') {
            steps {
                echo 'Building the application with Gradle Wrapper...'
                dir('backend/uptention') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test -Dspring.profiles.active=prod'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // 매 빌드마다 고정 태그 "latest"로 이미지를 빌드
                    def appImage = docker.build("${DOCKER_IMAGE}:latest", ".")
                    env.APP_IMAGE = "${DOCKER_IMAGE}:latest"
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub') {
                        docker.image(env.APP_IMAGE).push()
                    }
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                echo 'Deploying the application on EC2 using Docker Hub image...'
                sshPublisher(publishers: [
                    sshPublisherDesc(
                        configName: 'EC2-Server',
                        transfers: [
                            sshTransfer(
                                execCommand: """
                                    docker stop ${DOCKER_CONTAINER} || true
                                    docker rm ${DOCKER_CONTAINER} || true
                                    docker rmi ${DOCKER_IMAGE}:latest || true
                                    docker pull ${DOCKER_IMAGE}:latest
                                    docker run -d --name ${DOCKER_CONTAINER} \\
                                      -p ${DOCKER_PORT}:${DOCKER_PORT} \\
                                      -e SPRING_PROFILES_ACTIVE=prod \\
                                      -e TZ=UTC \\
                                      -e SERVER_PORT=${DOCKER_PORT} \\
                                      -e SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \\
                                      -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \\
                                      -e SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \\
                                      ${DOCKER_IMAGE}:latest
                                    docker image prune -f
                                """.stripIndent()
                            )
                        ]
                    )
                ])
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success { echo 'Deployment successful!' }
        failure { echo 'Deployment failed.' }
    }
}
